global !p

import px.snippets

def math_context():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def inline_math_context():
    return vim.eval('vimtex#syntax#in(\'texMathZoneTI\')') == '1'

def non_inline_math_context():
    return math_context() and not inline_math_context()

def non_math_context():
    return not math_context()

endglobal

snippet \ "TeX command" A
\\${0:item}
endsnippet

snippet	e "General TeX environment"
\\begin{${1:align*}}
 $0
\\end{$1}
endsnippet

snippet у "[ru] General TeX environment"
\\begin{${1:align*}}
 $0
\\end{$1}
endsnippet

snippet item "itemize environment" bA
\\begin{itemize}
 \item $0
\\end{itemize}
endsnippet
snippet шеуь "[ru] itemize environment" bA
\\begin{itemize}
 \item $0
\\end{itemize}
endsnippet

snippet enum "enumerate environment" bA
\\begin{enumerate}
 \item $0
\\end{enumerate}
endsnippet
snippet утгь "[ru] enumerate environment" bA
\\begin{enumerate}
 \item $0
\\end{enumerate}
endsnippet

snippet mk "Inline math: $...$" wA
$$1$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet
snippet ьл "[ru] Inline math: $...$" wA
$$1$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Display math" wA
\\begin{align*}
 $1
\\end{align*} $2
endsnippet
snippet вь "[ru] Display math" wA
\\begin{align*}
 $1
\\end{align*} $2
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet й "[ru] Quotes" w
<<$1>>$0
endsnippet

context "non_math_context()"
snippet i "Italic text" w
\\textit{$1}$0
endsnippet

context "non_math_context()"
snippet ш "[ru] Italic text" w
\\textit{$1}$0
endsnippet

context "non_math_context()"
snippet b "Bold text" w
\\textbf{$1}$0
endsnippet

context "non_math_context()"
snippet и "[ru] Bold text" w
\\textbf{$1}$0
endsnippet

context "non_math_context()"
snippet t "\texttt" w
\\texttt{$1}$0
endsnippet

context "non_math_context()"
snippet е "[ru] \texttt" w
\\texttt{$1}$0
endsnippet

#
# Math context snippets
#

context "math_context()"
snippet '([A-Za-z])(\d)' "Subscript with single digit" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math_context()"
snippet '_([\\\w]\w)' "Subscript with braces" irA
_{`!p snip.rv = match.group(1)`$1}$0
endsnippet

context "math_context()"
snippet ^ "Superscript" iA
^{$1}$0
endsnippet

context "math_context()"
snippet oo "Infinity sign" iA
\infty
endsnippet

context "math_context()"
snippet ES "Empty set" wA
\varnothing
endsnippet

context "math_context()"
snippet -> "\rightarrow, \to" iA
\to
endsnippet

context "math_context()"
snippet => "\implies" iA
\implies
endsnippet

context "math_context()"
snippet =< "\impliedby" iA
\impliedby
endsnippet

context "math_context()"
snippet <= "\leqslant" iA
\leqslant
endsnippet

context "math_context()"
snippet >= "\geqslant" iA
\geqslant
endsnippet

context "math_context()"
snippet // "Empty fraction" iA
\\frac{$1}{$2}$3
endsnippet

context "math_context()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction with dividend" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math_context()"
snippet '^.*\)/' "Fraction with divident in parentheses" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math_context()"
snippet par "Partial derivative"
\\frac{\\partial ${1:f}}{\\partial ${2:x}}$3
endsnippet

context "math_context()"
snippet '(sum|prod|cup|bigcup|cap|bigcap|sqcup|bigsqcup|sqcap|bigsqcap)r' "Operation over a range (possibly infinite)" wrA
\\`!p
snip.rv = match.group(1)
if snip.rv in {"cup", "sqcup", "cap", "sqcap"}:
    snip.rv = "big" + snip.rv
`_{${1:k=1}}^{${2:\infty}} $0
endsnippet

context "math_context()"
snippet '(sum|prod|cup|bigcup|cap|bigcap|sqcup|bigsqcup|sqcap|bigsqcap)s' "Operation over a set" wrA
\\`!p
snip.rv = match.group(1)
if snip.rv in {"cup", "sqcup", "cap", "sqcap"}:
    snip.rv = "big" + snip.rv
`_{${1:i \in I}} $0
endsnippet

context "inline_math_context()"
snippet intr "Integral over a range" wA
\\int_{${1:1}}^{${2:+\infty}} $3 \, d${4:x} $0
endsnippet
context "non_inline_math_context()"
snippet intr "Integral over a range" wA
\\int\\limits_{${1:1}}^{${2:+\infty}} $3 \, d${4:x} $0
endsnippet

context "math_context()"
snippet dl "Delimiter environment" wA
\\left\\l${1:floor} $2 \\right\\r$1 $0
endsnippet

context "math_context()"
snippet b "Parentheses delimiter" w
\\left( $1 \\right)$0
endsnippet

context "math_context()"
snippet B "Curly braces delimiter" w
\\left\\{ $1 \\right\\}$0
endsnippet

context "math_context()"
snippet a "Absolute value delimiter" w
\\left| $1 \\right|$0
endsnippet

context "math_context()"
snippet q "Square brackets delimiter" w
\\left[ $1 \\right]$0
endsnippet

context "math_context()"
snippet cases "cases environment" wA
\\begin{cases}
 ${1:1}, \\text{ если }$2  \\\\
 ${3:0}, \\text{ иначе }
\\end{cases} $0
endsnippet

context "math_context()"
snippet isq "Sequence declaration in braces" wA
\\{${1:x}_{${2:n}}\\}_{$2=1}^{\\infty}$0 
endsnippet

context "math_context()"
snippet ixf "General indexed family declaration in braces" wA
\\left\\{$1\\right\\}_{$2}$0
endsnippet

context "math_context()"
snippet fun "Function declaration" wA
${1:f} \\colon\\, ${2:E} \\to \\R $0 
endsnippet
context "math_context()"
snippet mp "Map declaration" wA
${1:f} \\colon\\, ${2:X} \\to ${3:Y} $0
endsnippet
context "math_context()"
snippet tfn "Transformation declaration" wA
${1:f} \\colon\\, ${2:X} \\to ${2} $0
endsnippet

context "math_context()"
snippet AA "\forall quantor" wA
\\forall $1 \\colon\\; $0
endsnippet
context "math_context()"
snippet EE "\exists quantor" wA
\\exists $1 \\colon\\; $0
endsnippet

context "math_context()"
snippet tt "\mathtt environment" wA
\\mathtt{$1}$0 
endsnippet
